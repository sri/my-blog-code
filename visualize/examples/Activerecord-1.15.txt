module ActiveRecord
  module Aggregations
    def self.included
    def clear_aggregation_cache
    module ClassMethods
      def composed_of
      def reader_method
    def writer_method
  class HasManyThroughAssociationNotFoundError
    def initialize
  class HasManyThroughAssociationPolymorphicError
    def initialize
  class HasManyThroughSourceAssociationNotFoundError
    def initialize
  class HasManyThroughSourceAssociationMacroError
    def initialize
  class HasManyThroughCantAssociateNewRecords
    def initialize
  class EagerLoadPolymorphicError
    def initialize
  class ReadOnlyAssociation
    def initialize
  module Associations
    def self.included
    def clear_association_cache
    module ClassMethods
      def has_many
      def has_one
      def belongs_to
      def has_and_belongs_to_many
      def join_table_name
      def association_accessor_methods
      def collection_reader_method
      def collection_accessor_methods
      def add_multiple_associated_save_callbacks
      def association_constructor_method
      def find_with_associations
      def configure_dependency_for_has_many
      def configure_dependency_for_has_one
      def add_deprecated_api_for_has_many
      def create_has_many_reflection
      def create_has_one_reflection
      def create_belongs_to_reflection
      def create_has_and_belongs_to_many_reflection
      def reflect_on_included_associations
      def guard_against_unlimitable_reflections
      def select_all_rows
      def construct_finder_sql_with_included_associations
      def add_limited_ids_condition!
      def select_limited_ids_list
      def construct_finder_sql_for_association_limiting
      def include_eager_conditions?
      def include_eager_order?
      def using_limitable_reflections?
      def column_aliases
      def add_association_callbacks
      def condition_word
      def create_extension_module
      class JoinDependency
        def initialize
        def join_associations
        def join_base
        def instantiate
        def aliased_table_names_for
        def build
        def construct
        def construct_association
        class JoinBase
          def initialize
          def aliased_prefix
          def aliased_primary_key
          def aliased_table_name
          def column_names_with_alias
          def extract_record
          def record_id
          def instantiate
        class JoinAssociation
          def initialize
          def association_join
          def pluralize
          def table_alias_for
          def table_name_and_alias
          def interpolate_sql
      def deprecated_collection_count_method
      def deprecated_add_association_relation
      def deprecated_remove_association_relation
      def deprecated_has_collection_method
      def deprecated_find_in_collection_method
      def deprecated_find_all_in_collection_method
      def deprecated_collection_create_method
      def deprecated_collection_build_method
      def deprecated_association_comparison_method
      def deprecated_has_association_method
    class AssociationCollection
      def to_ary
      def reset
      def <<
      def delete_all
      def sum
      def delete
      def clear
      def destroy_all
      def create
      def size
      def length
      def empty?
      def uniq
      def replace
      def reset_target!
      def find_target
      def callback
      def callbacks_for
    class AssociationProxy
      def initialize
      def proxy_owner
      def proxy_reflection
      def proxy_target
      def respond_to?
      def ===
      def aliased_table_name
      def conditions
      def reset
      def reload
      def loaded?
      def loaded
      def target
      def target=
      def dependent?
      def quoted_record_ids
      def interpolate_sql_options!
      def interpolate_sql
      def sanitize_sql
      def extract_options_from_args!
      def set_belongs_to_association_for
      def merge_options_from_reflection!
      def method_missing
      def load_target
      def foreign_key_present
      def raise_on_type_mismatch
      def flatten_deeper
    class BelongsToAssociation
      def create
      def build
      def replace
      def updated?
      def find_target
      def foreign_key_present
    class BelongsToPolymorphicAssociation
      def replace
      def updated?
      def find_target
      def foreign_key_present
      def association_class
    class HasAndBelongsToManyAssociation
      def initialize
      def build
      def create
      def find_first
      def find
      def push_with_attributes
      def method_missing
      def count_records
      def insert_record
      def delete_records
      def construct_sql
      def finding_with_ambigious_select?
    class HasManyAssociation
      def initialize
      def build
      def find_all
      def find_first
      def count
      def find
      def method_missing
      def load_target
      def count_records
    def has_cached_counter?
    def cached_counter_attribute_name
    def insert_record
    def delete_records
    def target_obsolete?
    def construct_sql
    class HasManyThroughAssociation
      def initialize
      def find
      def reset
      def <<
      def delete
      def build
      def create!
      def sum
      def method_missing
      def find_target
      def construct_owner_attributes
      def construct_join_attributes
      def construct_quoted_owner_attributes
      def construct_conditions
      def construct_from
      def construct_select
      def construct_joins
      def construct_scope
      def construct_sql
      def conditions
    class HasOneAssociation
      def initialize
      def create
      def build
      def replace
      def find_target
      def construct_sql
  module AttributeMethods
    def self.included
    module ClassMethods
      def attribute_method_suffix
      def match_attribute_method?
      def rebuild_attribute_method_regexp
      def attribute_method_suffixes
    def attribute?
    def attribute=
    def attribute_before_type_cast
  class ActiveRecordError
  class SubclassNotFound
  class AssociationTypeMismatch
  class SerializationTypeMismatch
  class AdapterNotSpecified
  class AdapterNotFound
  class ConnectionNotEstablished
  class ConnectionFailed
  class RecordNotFound
  class RecordNotSaved
  class StatementInvalid
  class PreparedStatementInvalid
  class StaleObjectError
  class ConfigurationError
  class ReadOnlyRecord
  class AttributeAssignmentError
    def initialize
  class MultiparameterAssignmentErrors
    def initialize
  class Base
    def self.inherited
    def self.reset_subclasses
    class <<
      def find
      def find_by_sql
      def exists?
      def create
      def update
      def delete
      def destroy
      def update_all
      def destroy_all
      def delete_all
      def count_by_sql
      def increment_counter
      def decrement_counter
      def attr_protected
      def protected_attributes
      def attr_accessible
      def accessible_attributes
      def serialize
      def serialized_attributes
      def table_name
      def reset_table_name
      def primary_key
      def reset_primary_key
      def inheritance_column
      def sequence_name
      def reset_sequence_name
      def set_table_name
      def set_primary_key
      def set_inheritance_column
      def set_sequence_name
      def class_name
      def table_exists?
      def columns
      def columns_hash
      def column_names
      def content_columns
      def column_methods_hash
      def read_methods
      def reset_column_information
      def reset_column_information_and_inheritable_attributes_for_all_subclasses#:nodoc:
      def human_attribute_name
      def descends_from_active_record?
      def quote_value
      def quote
      def sanitize
      def benchmark
      def silence
      def with_scope
      def with_exclusive_scope
      def ===
      def threaded_connections
      def threaded_connections=
      def base_class
      def abstract_class?
      def find_initial
      def find_every
      def find_from_ids
      def find_one
      def find_some
      def instantiate
      def type_name_with_module
      def construct_finder_sql
      def merge_includes
      def safe_to_array
      def add_order!
      def add_limit!
      def add_lock!
      def add_joins!
      def add_conditions!
      def type_condition
      def undecorated_table_name
      def method_missing
      def determine_finder
      def determine_deprecated_finder
      def determine_instantiator
      def extract_attribute_names_from_match
      def construct_attributes_from_arguments
      def all_attributes_exists?
      def attribute_condition
      def expand_id_conditions
      def define_attr_method
        class <<
      def subclasses
      def scoped?
      def scope
      def thread_safe_scoped_methods
      def single_threaded_scoped_methods
      def current_scoped_methods
      def compute_type
      def class_of_active_record_descendant
      def class_name_of_active_record_descendant
      def sanitize_sql
      def sanitize_sql_hash
      def sanitize_sql_array
      def replace_bind_variables
      def replace_named_bind_variables
      def quote_bound_value
      def raise_if_bind_arity_mismatch
      def extract_options_from_args!
      def validate_find_options
      def set_readonly_option!
      def encode_quoted_value
      def find_on_conditions
      def find_first
      def find_all
      def connection=
      def frontbase_connection
      def sqlite3_connection
      def sqlite_connection
      def parse_config!
      def thread_safe_active_connections
      def single_threaded_active_connections
      def allow_concurrency=
        class <<
      def active_connection_name
      def clear_active_connection_name
      def connection
      def clear_active_connections!
      def clear_reloadable_connections!
      def verify_active_connections!
      def clear_cache!
      def remove_stale_cached_threads!
      def clear_all_cached_connections!
    def initialize
    def id
    def to_param
    def id_before_type_cast
    def quoted_id
    def id=
    def new_record?
    def save
    def save!
    def destroy
    def clone
    def update_attribute
    def update_attributes
    def update_attributes!
    def increment
    def increment!
    def decrement
    def decrement!
    def toggle
    def toggle!
    def reload
    def []
    def []=
    def attributes=
    def attributes
    def attributes_before_type_cast
    def attribute_present?
    def has_attribute?
    def attribute_names
    def column_for_attribute
    def ==
    def eql?
    def hash
    def respond_to?
    def freeze
    def frozen?
    def readonly?
    def readonly!
    def create_or_update
    def update
    def create
    def ensure_proper_type
    def method_missing
    def read_attribute
    def read_attribute_before_type_cast
    def define_read_methods
    def define_read_method
    def define_read_method_for_serialized_attribute
    def define_question_method
    def evaluate_read_method
    def unserializable_attribute?
    def unserialize_attribute
    def write_attribute
    def convert_number_column_value
    def query_attribute
    def remove_attributes_protected_from_mass_assignment
    def attributes_protected_by_default
    def attributes_with_quotes
    def quote_value
    def quote
    def interpolate_sql
    def attributes_from_column_definition
    def assign_multiparameter_attributes
    def execute_callstack_for_multiparameter_attributes
    def extract_callstack_for_multiparameter_attributes
    def type_cast_attribute_value
    def find_parameter_position
    def comma_pair_list
    def quoted_column_names
    def quote_columns
    def quoted_comma_pair_list
    def object_from_yaml
    def clone_attributes
    def clone_attribute_value
    def self.db2_connection
    def self.require_mysql
    def self.mysql_connection
    def self.openbase_connection
    def self.oracle_connection
    def self.oci_connection
    def write_lobs
    def self.postgresql_connection
    def self.sqlserver_connection
    def self.sybase_connection
    class ConnectionSpecification
      def initialize
    def connection
    def self.establish_connection
    def self.retrieve_connection
    def self.connected?
    def self.remove_connection
    def self.connection=
    def self.log_connections
  module Calculations
    def self.included
    module ClassMethods
      def count
      def average
      def minimum
      def maximum
      def sum
      def calculate
      def construct_count_options_from_legacy_args
      def construct_calculation_sql
      def execute_simple_calculation
      def execute_grouped_calculation
      def validate_calculation_options
      def column_alias_for
      def column_for
      def type_cast_calculated_value
  module Callbacks
    def self.included
      class <<
    module ClassMethods
      def instantiate_with_callbacks
    def initialize_with_callbacks
    def before_save
    def after_save
    def create_or_update_with_callbacks
    def before_create
    def after_create
    def create_with_callbacks
    def before_update
    def after_update
    def update_with_callbacks
    def before_validation
    def after_validation
    def before_validation_on_create
    def after_validation_on_create
    def before_validation_on_update
    def after_validation_on_update
    def valid_with_callbacks?
    def before_destroy
    def after_destroy
    def destroy_with_callbacks
    def callback
    def callbacks_for
    def invoke_and_notify
    def notify
  class IrreversibleMigration
  class DuplicateMigrationVersionError
    def initialize
  class Migration
    class <<
      def up_using_benchmarks
      def down_using_benchmarks
      def migrate
      def singleton_method_added
        class <<
      def write
      def announce
      def say
      def say_with_time
      def suppress_messages
      def method_missing
  class Migrator#:nodoc:
    class <<
      def migrate
      def up
      def down
      def schema_info_table_name
      def current_version
      def proper_table_name
    def initialize
    def current_version
    def migrate
    def migration_classes
    def assert_unique_migration_version
    def migration_files
    def migration_class
    def migration_version_and_name
    def set_schema_version
    def up?
    def down?
    def reached_target_version?
    def irrelevant_migration?
  module Observing
    def self.included
    module ClassMethods
      def observers=
      def observers
      def instantiate_observers
      def inherited
  class Observer
    class <<
      def observe
      def observed_class
    def initialize
    def update
    def observed_class_inherited
    def observed_classes
    def observed_subclasses
    def add_observer!
  class QueryCache
    def initialize
    def clear_query_cache
    def select_all
    def select_one
    def columns
    def insert
    def update
    def delete
    def method_missing
  class AbstractAdapter
    def clear_query_cache
  module Reflection
    def self.included
    module ClassMethods
      def create_reflection
      def reflections
      def reflect_on_all_aggregations
      def reflect_on_aggregation
      def reflect_on_all_associations
      def reflect_on_association
    class MacroReflection
      def initialize
      def name
      def macro
      def options
      def klass
      def class_name
      def ==
    class AggregateReflection
      def klass
      def name_to_class_name
    class AssociationReflection
      def klass
      def table_name
      def primary_key_name
      def association_foreign_key
      def counter_cache_column
      def through_reflection
      def source_reflection_names
      def source_reflection
      def check_validity!
      def name_to_class_name
  class Schema
    def self.define
  class SchemaDumper
    def self.dump
    def dump
    def initialize
    def header
    def trailer
    def tables
    def table
    def default_string
    def indexes
  module Timestamp
    def self.included
    def create_with_timestamps
    def update_with_timestamps
  module Transactions
    class TransactionError
    def self.included
    module ClassMethods
      def transaction
      def increment_open_transactions
      def decrement_open_transactions
    def transaction
    def destroy_with_transactions
    def save_with_transactions
    def save_with_transactions!
  class RecordInvalid
    def initialize
  class Errors
    def initialize
    def add_to_base
    def add
    def add_on_empty
    def add_on_blank
    def add_on_boundary_breaking
    def invalid?
    def on
    def on_base
    def each
    def each_full
    def full_messages
    def empty?
    def clear
    def size
    def to_xml
  module Validations
    def self.included
    module ClassMethods
      def validate
      def validate_on_create
      def validate_on_update
      def condition_block?
      def evaluate_condition
      def validates_each
      def validates_confirmation_of
      def validates_acceptance_of
      def validates_presence_of
      def validates_length_of
      def validates_uniqueness_of
      def validates_format_of
      def validates_inclusion_of
      def validates_exclusion_of
      def validates_associated
      def validates_numericality_of
      def create!
      def write_inheritable_set
      def validation_method
    def save_with_validation
    def save_with_validation!
    def update_attribute_with_validation_skipping
    def valid?
    def errors
    def validate
    def validate_on_create
    def validate_on_update
    def run_validations
    def validation_block?
    def validation_class?
  module VERSION
  module Wrappings
    module ClassMethods
      def wrap_with
      def wrap_in_yaml
    def self.included
    class AbstractWrapper
      def self.wrap
      def initialize
      def save_wrapped_attribute
      def load_wrapped_attribute
      def wrap
      def unwrap
    class YamlWrapper
      def wrap
      def unwrap
  module XmlSerialization
    def to_xml
  class XmlSerializer
    def initialize
    def builder
    def root
    def dasherize?
    def serializable_attributes
    def serializable_method_attributes
    def add_attributes
    def add_includes
    def add_procs
    def add_tag
    def serialize
    class Attribute
      def initialize
      def needs_encoding?
      def decorations
      def compute_type
      def compute_value
    class MethodAttribute
      def compute_type
  module Acts
    module List
      def self.included
      module ClassMethods
        def acts_as_list
      module InstanceMethods
        def insert_at
        def move_lower
        def move_higher
        def move_to_bottom
        def move_to_top
        def remove_from_list
        def increment_position
        def decrement_position
        def first?
        def last?
        def higher_item
        def lower_item
        def in_list?
        def add_to_list_top
        def add_to_list_bottom
        def scope_condition
        def bottom_position_in_list
        def bottom_item
        def assume_bottom_position
        def assume_top_position
        def decrement_positions_on_higher_items
        def decrement_positions_on_lower_items
        def increment_positions_on_higher_items
        def increment_positions_on_lower_items
        def increment_positions_on_all_items
        def insert_at_position
    module NestedSet
      def self.included
      module ClassMethods
        def acts_as_nested_set
      module InstanceMethods
        def root?
        def child?
        def unknown?
        def add_child
        def children_count
        def full_set
        def all_children
        def direct_children
        def before_destroy
    module Tree
      def self.included
      module ClassMethods
        def acts_as_tree
      module InstanceMethods
        def ancestors
        def root
        def siblings
        def self_and_siblings
  module ConnectionAdapters
    class AbstractAdapter
      def initialize
      def adapter_name
      def supports_migrations?
      def supports_count_distinct?
      def prefetch_primary_key?
      def reset_runtime
      def active?
      def reconnect!
      def disconnect!
      def requires_reloading?
      def verify!
      def raw_connection
      def log
      def log_info
      def format_log_entry
    class DB2Adapter
      def initialize
      def insert
      def execute
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def quote_column_name
      def adapter_name
      def quote_string
      def add_limit_offset!
      def tables
      def indexes
      def columns
      def native_database_types
      def quoted_true
      def quoted_false
      def active?
      def reconnect!
      def table_alias_length
      def with_statement
      def last_insert_id
      def select
    class FirebirdColumn
      def initialize
      def type
      def default
      def self.value_to_boolean
      def parse_default
      def decide_default
      def firebird_cast_default
      def decide_limit
      def column_def
      def simplified_type
    class FirebirdAdapter
      def initialize
      def adapter_name
      def supports_migrations?
      def native_database_types
      def prefetch_primary_key?
      def default_sequence_name
      def quote
      def quote_string
      def quote_column_name
      def quoted_true
      def quoted_false
      def active?
      def disconnect!
      def reconnect!
      def select_all
      def select_one
      def execute
      def insert
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_limit_offset!
      def next_sequence_value
      def current_database
      def recreate_database!
      def tables
      def indexes
      def columns
      def create_table
      def drop_table
      def add_column
      def change_column
      def change_column_default
      def rename_column
      def remove_index
      def rename_table
      def dump_schema_information
      def type_to_sql
      def integer_sql_type
      def float_sql_type
      def select
      def primary_key
      def index_metadata
      def change_column_type
      def change_column_position
      def copy_table
      def copy_table_indexes
      def copy_table_data
      def copy_sequence_value
      def sequence_exists?
      def create_sequence
      def drop_sequence
      def create_boolean_domain
      def table_has_constraints_or_dependencies?
      def non_existent_domain_error?
      def fb_to_ar_case
      def ar_to_fb_case
    class TwelveByteKey
      def initialize
      def inspect
      class <<
        def key_sequence_component
        def key_pid_component
        def key_time_component
        def key_ip_component
    class FrontBaseColumn
      def initialize
      def type_cast
      def type_cast_code
      def simplified_type
    class FrontBaseAdapter
      class <<
        def compare_versions
      def initialize
      def adapter_name
      def supports_migrations?
      def native_database_types
      def quote
      def quote_string
      def quote_column_name
      def quoted_true
      def quoted_false
      def active?
      def reconnect!
      def disconnect!
      def select_all
      def select_one
      def query
      def execute
      def insert
      def update
      def set_pessimistic_transactions
      def set_optimistic_transactions
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_limit_offset!
      def prefetch_primary_key?
      def next_sequence_value
      def default_sequence_name
      def reset_sequence!
      def classes_for_table_name
      def reset_pk_sequence!
      def structure_dump
      def recreate_database
      def create_database
      def drop_database
      def current_database
      def tables
      def indexes
      def columns
      def create_table
      def rename_table
      def drop_table
      def add_column
      def add_column_options!
      def remove_column
      def remove_index
      def change_column_default
      def change_column
      def rename_column
      def cleanup_fb_sql
    class MysqlColumn
      def initialize
      def simplified_type
      def missing_default_forged_as_empty_string?
    class MysqlAdapter
      def initialize
      def adapter_name
      def supports_migrations?
      def native_database_types
      def quote
      def quote_column_name
      def quote_string
      def quoted_true
      def quoted_false
      def active?
      def reconnect!
      def disconnect!
      def execute
      def insert
      def update
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_limit_offset!
      def structure_dump
      def recreate_database
      def create_database
      def drop_database
      def current_database
      def tables
      def indexes
      def columns
      def create_table
      def rename_table
      def change_column_default
      def change_column
      def rename_column
      def connect
      def select
      def supports_views?
      def version
    class OpenBaseColumn
      def simplified_type
    class OpenBaseAdapter
      def adapter_name
      def native_database_types
      def supports_migrations?
      def prefetch_primary_key?
      def default_sequence_name
      def next_sequence_value
      def quote
      def quoted_true
      def quoted_false
      def add_limit_offset!
      def select_all
      def select_one
      def insert
      def execute
      def update
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def tables
      def columns
      def indexes
      def select
      def default_value
      def sql_type_name
      def index_name
      def translate_sql
      def update_nulls_after_insert
    class OracleColumn
      def type_cast
      def simplified_type
      def guess_date_or_time
    class OracleAdapter
      def adapter_name
      def supports_migrations?
      def native_database_types
      def table_alias_length
      def quote_column_name
      def quote_string
      def quote
      def quoted_true
      def quoted_false
      def active?
      def reconnect!
      def disconnect!
      def execute
      def next_sequence_value
      def insert
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_limit_offset!
      def prefetch_primary_key?
      def default_sequence_name
      def current_database
      def tables
      def indexes
      def columns
      def create_table
      def rename_table
      def drop_table
      def remove_index
      def change_column_default
      def change_column
      def rename_column
      def remove_column
      def pk_and_sequence_for
      def structure_dump
      def structure_drop
      def distinct
      def add_order_by_for_association_limiting!
      def select
      def oracle_downcase
    class PostgreSQLAdapter
      def adapter_name
      def initialize
      def active?
      def reconnect!
      def disconnect!
      def native_database_types
      def supports_migrations?
      def table_alias_length
      def quote
      def quote_column_name
      def quoted_date
      def insert
      def query
      def execute
      def update
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def tables
      def indexes
      def columns
      def schema_search_path=
      def schema_search_path
      def default_sequence_name
      def reset_pk_sequence!
      def pk_and_sequence_for
      def rename_table
      def add_column
      def change_column
      def change_column_default
      def rename_column
      def remove_index
      def type_to_sql
      def distinct
      def add_order_by_for_association_limiting!
      def configure_connection
      def last_insert_id
      def select
      def escape_bytea
      def unescape_bytea
      def column_definitions
      def translate_field_type
      def default_value
      def cast_to_time
        class ==
    class SQLiteColumn
      class <<
        def string_to_binary
        def binary_to_string
    class SQLiteAdapter
      def adapter_name
      def supports_migrations?
      def requires_reloading?
      def supports_count_distinct?
      def native_database_types
      def quote_string
      def quote_column_name
      def execute
      def update
      def delete
      def insert
      def select_all
      def select_one
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_lock!
      def tables
      def columns
      def indexes
      def primary_key
      def remove_index
      def rename_table
      def add_column
      def remove_column
      def change_column_default
      def change_column
      def rename_column
      def table_structure
      def alter_table
      def move_table
      def copy_table
      def copy_table_indexes
      def copy_table_contents
      def catch_schema_changes
    class SQLite2Adapter
      def execute
      def rewrite_count_distinct_queries
      def rename_table
      def add_column
    class DeprecatedSQLiteAdapter
      def insert
    class SQLServerColumn
      def initialize
      def simplified_type
      def type_cast
      def cast_to_time
      def cast_to_datetime
      def self.string_to_time
      def self.string_to_binary
      def self.binary_to_string
    class SQLServerAdapter
      def initialize
      def native_database_types
      def adapter_name
      def supports_migrations?
      def type_to_sql
      def active?
      def reconnect!
      def disconnect!
      def columns
      def insert
      def update
      def execute
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def quote
      def quote_string
      def quote_column_name
      def add_limit_offset!
      def recreate_database
      def drop_database
      def create_database
      def current_database
      def tables
      def indexes
      def rename_table
      def add_column
      def rename_column
      def change_column
      def remove_column
      def remove_default_constraint
      def remove_check_constraints
      def remove_index
      def select
      def with_identity_insert_enabled
      def set_identity_insert
      def get_table_name
      def identity_column
      def query_requires_identity_insert?
      def change_order_direction
      def get_special_columns
      def repair_special_columns
    class SybaseAdapter
      class ColumnWithIdentity
        def initialize
        def simplified_type
        def self.string_to_binary
        def self.binary_to_string
      def initialize
      def native_database_types
      def type_to_sql
      def adapter_name
      def active?
      def disconnect!
      def reconnect!
      def table_alias_length
      def insert
      def execute
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def current_database
      def tables
      def indexes
      def columns
      def quoted_true
      def quoted_false
      def quote
    def force_numeric?
    def quote_string
    def quote_column_name
    def add_limit_offset!
    def add_lock!
    def supports_migrations?
    def rename_table
    def rename_column
    def change_column
    def remove_column
    def remove_default_constraint
    def remove_index
    def add_column_options!
    def enable_identity_insert
    def check_null_for_column?
    def last_insert_id
    def affected_rows
    def use_temp_table?
    def zero_limit?
    def raw_execute
    def select
    def get_table_name
    def has_identity_column
    def get_identity_column
    def query_contains_identity_column
    def resolve_type
    def normalize_type
    module DatabaseStatements
      def select_all
      def select_one
      def select_value
      def select_values
      def execute
      def insert
      def update
      def delete
      def transaction
      def begin_db_transaction
      def commit_db_transaction
      def rollback_db_transaction
      def add_limit!
      def add_limit_offset!
      def add_lock!
      def default_sequence_name
      def reset_sequence!
      def select
    module Quoting
      def quote
      def quote_string
      def quote_column_name
      def quoted_true
      def quoted_false
      def quoted_date
    class Column
      def initialize
      def text?
      def number?
      def klass
      def type_cast
      def type_cast_code
      def human_name
      def self.string_to_binary
      def self.binary_to_string
      def self.string_to_date
      def self.string_to_time
      def self.string_to_dummy_time
      def self.value_to_boolean
      def self.value_to_decimal
      def self.microseconds
      def extract_limit
      def extract_precision
      def extract_scale
      def simplified_type
    class IndexDefinition
    class ColumnDefinition
      def sql_type
      def to_sql
      def add_column_options!
    class TableDefinition
      def initialize
      def primary_key
      def []
      def column
      def to_sql
      def native
    module SchemaStatements
      def native_database_types
      def table_alias_length
      def table_alias_for
      def columns
      def create_table
      def rename_table
      def drop_table
      def add_column
      def remove_column
      def change_column
      def change_column_default
      def rename_column
      def add_index
      def remove_index
      def index_name
      def structure_dump
      def initialize_schema_information
      def dump_schema_information
      def type_to_sql
      def add_column_options!
      def distinct
      def add_order_by_for_association_limiting!
      def options_include_default?
  class <<
    def firebird_connection
  module Locking
    module Optimistic
      def self.included
        class <<
      def locking_enabled?
      def attributes_from_column_definition_with_lock
      def update_with_lock
      module ClassMethods
        def set_locking_column
        def locking_column
        def quoted_locking_column
        def reset_locking_column
    module Pessimistic
      def lock!
module YAML
  class Omap
    def keys
    def values
class FixtureClassNotFound
class Fixtures
  def self.instantiate_fixtures
  def self.instantiate_all_loaded_fixtures
  def self.create_fixtures
  def initialize
  def delete_existing_fixtures
  def insert_fixtures
  def read_fixture_files
def yaml_file_path
def deprecated_yaml_file_path
def csv_file_path
def yaml_fixtures_key
def erb_render
class Fixture
  class FixtureError
  class FormatError
  def initialize
  def each
  def []
  def to_hash
  def key_list
  def value_list
  def find
  def read_fixture_file
module Test
  module Unit
    class TestCase
      def self.set_fixture_class
      def self.fixtures
      def self.require_fixture_classes
      def self.setup_fixture_accessors
      def self.uses_transaction
      def self.uses_transaction?
      def use_transactional_fixtures?
      def setup_with_fixtures
      def teardown_with_fixtures
      def self.method_added
      def load_fixtures
      def instantiate_fixtures
      def load_instances?
module FireRuby
  class Database
    def self.db_string_for
    def self.new_from_config
module MysqlCompat
  def self.define_all_hashes_method!
class OCI8
  class Cursor
    def define_a_column
  def describe
class OracleConnectionFactory
  def new_connection
class OCI8AutoRecover
  class <<
  def initialize
  def ping
  def reset!
  def exec
class SybaseAdapterContext
  def init
  def srvmsgCB
  def deadlocked?
  def failed?
  def reset
  def cltmsgCB
module DB2
  module DB2Util
    def free
    def handle
    def check_rc
  class Environment
    def initialize
    def data_sources
class Connection
  def initialize
  def connect
  def set_connect_attr
    class ==
    def set_auto_commit_on
    def set_auto_commit_off
    def disconnect
    def rollback
    def commit
class Statement
  def initialize
  def columns
  def tables
  def indexes
  def prepare
def execute
  class ==
  class size
    class ==
def bindParms
  class ==
  def bind
  def tokens
  def exec_direct
  def set_cursor_name
  def get_cursor_name
  def row_count
  def num_result_cols
  def fetch_all
    def fetch
    def fetch_as_hash
    def get_col_desc
    def adjust_content
    class Parameter
      def initialize
class Mysql
  def initialize
  def real_connect
  def handle_auth_fallback
  def escape_string
  def get_client_info
  def options
  def real_query
  def use_result
  def store_result
  def change_user
  def character_set_name
  def close
  def create_db
  def drop_db
  def dump_debug_info
  def get_host_info
  def get_proto_info
  def get_server_info
  def kill
  def list_dbs
  def list_fields
  def list_processes
  def list_tables
  def ping
  def query
  def refresh
  def reload
  def select_db
  def shutdown
  def stat
  def read_one_row
  def skip_result
  def inspect
  def read_query_result
  def unpack_fields
def read_rows
  def get_length
  def command
  def read
  def write
  def hash_password
  def scramble
  def scramble41
  def error
class Result
  def initialize
  def data_seek
  def fetch_field
  def fetch_fields
  def fetch_field_direct
  def fetch_lengths
  def fetch_row
  def fetch_hash
  def field_seek
  def field_tell
  def free
  def num_fields
  def num_rows
  def row_seek
  def row_tell
def each
  def each_hash
    def inspect
  class Field
    def initialize
    def inspect
  class Error
    def initialize
    def Error::err
class Net
  def initialize
  def clear
  def read
    def write
      def close
      def Net::int2str
      def Net::int3str
      def Net::int4str
    class Random
      def initialize
      def rnd
  class <<
    def init
    def real_connect
    def finalizer
    def escape_string
    def get_client_info
    def debug
module Transaction
  class TransactionError
  class TransactionAborted
  class TransactionCommitted
  module Simple
    def self.debug_io=
    def self.debugging?
    def self.debug_io
    def transaction_open?
    def transaction_name
    def start_transaction
    def rewind_transaction
    def abort_transaction
    def commit_transaction
    def transaction
    def transaction_exclusions
    class <<
      def __common_start
      def start_named
      def start
    def __abort_transaction
    def __rewind_this_transaction
    def __commit_transaction
